/* Design tokens. 
With tokens, stick to communicating the PURPOSE not the VALUE.
Code should explain, not mystify, your design.
*/
:root {
  --paper: hsla(0, 0%, 100%, 0.99);
  --ink: hsla(244, 16%, 17%, 0.95);
  --brand: hsla(0, 79%, 63%, 0.9);
  --font: "Raleway", system-ui, sans-serif;
  --gap: 20px;
  --container: clamp(280px, calc(100vw - calc(var(--gap) * 2)), 1180px);
  /* https://web.dev/accessible-tap-targets/ */
  --tap-target: 48px;
  --box: clamp(280px, 50vw + 2px, 530px);
}

/* Hey look, dark mode is
so easy with design tokens done this way
*/
@media (prefers-color-scheme: dark) {
  :root {
    --ink: hsla(252, 38%, 92%, 0.99);
    --paper: hsla(244, 16%, 17%, 1);
  }
}

/* General styles */
html,
body {
  scroll-behavior: smooth;
  background: var(--paper);
  color: var(--ink);
  font-family: var(--font);
}
body {
  display: grid;
  margin: auto;
  min-height: 100vh;
  gap: var(--gap);
  max-width: var(--container);
  
}
.header{
  width:5rem;
  display: flex;
  justify-content: center;
  align-items: center;
  
}
a,
a:any-link {
  color: currentColor;
  text-decoration: none;
  border-bottom: 5px solid transparent;
  transition: border-color ease-in-out 0.3s;
}
a:hover,
a:focus {
  color: var(--brand);
  border-color: rgb(0, 255, 191);
}
p a:any-link {
  border-color: var(--brand);
}
/* Site header and navigation 
https://elad.medium.com/css-position-sticky-how-it-really-works-54cd01dc2d46
*/
body > header {
  background: var(--paper);
  display: flex;
  justify-content: space-between;
  align-items: center;
  position: sticky;
  top: 0;
  z-index: 1;
}
nav ul {
  display: flex;
  list-style: none;
  gap: var(--gap);
}

/* Text readability 
https://baymard.com/blog/line-length-readability 
*/
section p {
  line-height: 1.5;
  max-width: 55ch;
}
/* targeted resets 
We're resetting elements with a class - ANY class 
- on the grounds that if you added a class, 
you added your own styles
*/
h3[class] {
  margin: 0 auto 0 0;
}
ul[class],
li[class] {
  margin: 0;
  padding: 0;
}

/* Basic image rules 
Don't size images in css, size their containers
Just make images take up the entire space you give them
in every context
*/
svg {
  height: 100%;
  width: auto;
  min-width: var(--tap-target);
}

img {
  width: 100%;
  height: 100%;
  max-width: 100%;
  object-fit: cover;
}

picture {
  height: auto;
  overflow: hidden;
}
/* 
I would start breaking this up into component files now btw! 
*/
.showcase {
  display: flex;
  flex-flow: row wrap;
  gap: var(--gap);
}
/*
Here's an example of a grid layout. Notice there's no margin, padding, or sizes given on elements
All the spacing and sizing is set on the template, and the elements
are just slotted in.
The little dots are how we precisely place and size white-space
https://www.interaction-design.org/literature/article/the-power-of-white-space
*/

.project {
  display: grid;
  grid-template:
    "picture picture picture" var(--box)
    "....... ....... ......." calc(var(--gap) / 2)
    "....... heading ......." min-content
    "....... blurb   ......." auto /
    var(--gap) var(--box) var(--gap);
}
.project__picture {
  grid-area: picture;
}
.project__heading {
  grid-area: heading;
}
.project__blurb {
  grid-area: blurb;
}
.project_item{
  width:15rem;
}
.project_container{
  
  

}


